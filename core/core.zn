final Sequence = class {
    // Check if all the elements in the sequence satisfy the predicate.
    pub func all(f) {
        if this.empty? { return false; }
        for item in this {
            if not f(item) { return false; }
        }
        true
    }

    // Check if any of the elements in the sequence satisfy the predicate.
    pub func any(f) {
        if this.empty? { return false; }
        for item in this {
            if f(item) { return true; }
        }
        false
    }
    
    // Check if the sequence has the given element.
    pub func has?(elem) {
        for item in this {
            if item == elem { return true; }
        }
        false
    }

    // Apply a function to each element in the sequence.
    pub func map(f) ->
        match this {
            [] -> [],
            [head, ..tail] -> [f(head), ..tail.map(f)]
        };

    // Reduce the sequence to a single value as per the provided function.
    pub func fold(acc, f) ->
        match this {
            [] -> acc,
            [head, ..tail] -> tail.fold(f(acc, head), f)
        };

    // Return a new sequence with only the elements that satisfy the predicate.
    pub func where(f) ->
        match this {
            [] -> [],
            [head, ..tail] ->
                f(head) ?
                    [head, ..tail.where(f)] :
                    tail.where(f)
        };

    // Join the elements of the sequence into a string, seperated by the given
    // string.
    pub func join(sep) ->
        match this {
            [] -> "",
            [head, ..tail] ->
                tail.fold(head.to_string, 
                    (acc, item) -> acc + sep + item.to_string)
        };

    pub func swap(i, j) {
        let tmp = this[i];
        this[i] = this[j];
        this[j] = tmp;
    }
    
    pub func operator +(other) ->
        match this {
            [] -> other,
            [head, ..tail] -> [head, ..tail + other]
        };

    // The number of elements in the sequence.
    get len -> this.fold(0, (acc, _) -> acc + 1);

    // The number of elements in the sequence satisfying the given predicate.
    pub func len(f) -> this.where(f).len;

    // Check if the sequence is empty.
    get empty? -> this.len == 0;
}

// A list is a contiguous and growable sequence of elements.
final List = class is Sequence {
    get to_string -> "[" + this.join(", ") + "]";

    pub func sort() -> this.quicksort(this, 0, this.len - 1);

    func quicksort(arr, lo, hi) {
        if this.empty? { return this; }

        final pivot_idx = this.partition(this, lo, hi);

        this.quicksort(arr, lo, pivot_idx - 1);
        this.quicksort(arr, pivot_idx + 1, hi);
    }

    func partition(f, lo, hi) {
        final pivot = this[hi];
        let idx = lo - 1;

        for i in lo..hi {
            if this[i] <= pivot {
                idx += 1;
                this.swap(i, idx);
            }
        }

        idx += 1;
        this.swap(idx, hi);

        idx
    }
}
