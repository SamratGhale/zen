// Hello world! (This is a comment btw)
print "Hello, world!";

let name = "Sam"; // Create a variable!
final nice = 69; // Can't reassign to this!

// You can group variable declarations together.
let
    age = 21
    is_cool = true
    unknown;

// Also works with final variables.
final 
    is_nice = true
    is_not_nice = false;

// Some convenience functions are available in the global scope.
print upcase("hello"); //=> "HELLO"
print ln(2); //=> 0.693

// Conditionals!
if false {
    print "How did this happen!";
} else if true {
    print "This is supposed to happen";
}

// No rand_int function yet, but let's pretend it does for a minute.
let a = rand_int(0, 5);

switch a {
    0 => print "a is 0"
    1 => print "a is 1"
    2 => print "a is 2"
    3 => print "a is 3"
    4 => print "a is 4"
    5 => print "a is 5"
    _ => print "a is not between 0 and 5"
}

// Loops.
while true {
    print "This will never end!";
}

// For loops.
for let i = 0; i < 10; i += 1 {
    print i;
}

// Break and continue.
for let i = 0; i < 10; i += 1 {
    if i == 5 {
        continue;
    }
    if i == 8 {
        break;
    }
    print i;
} //=> 0 1 2 3 4 6 7

// Functions!
func a_function() {
    print "This is a function!";
}
a_function() //=> "This is a function!"

// If the function just returns an expression, simply use the `=>` operator.
func sum(a, b) => a + b

// Anonymous functions have no name. Here, we assign it to a variable, so it
// isn't really anonymous anymore.
let anon = func() => { print "This is an anonymous function!" }
// Functions are first-class, so you can pass them around to other functions.

// Pipes!
// Pipes are used to pass expressions to other expressions.
// For example, the following two lines are equivalent:
print upcase("hello");
print "hello" |> upcase();

// In a pipeline, any function call implicitly takes the last expression as its
// first argument.
// Another way to access the last expression is with the `it` keyword.
print "69"
    |> parse()
    |> it + 1; //=> 70

// Things to expect in the future (topmost being the most likely):
// - Classes and methods
// - More standard library functions
// - Modules
// - Gradual typing
// - Pattern matching
