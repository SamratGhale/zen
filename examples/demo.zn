// Some builtin modules, with many useful functions.
use "list"
use "math"
use "string"

// Hello world! (This is a comment btw)
print "Hello, world!"
print "\n" // The print statement does not append a newline by default.

var name = "Sam" // Create a variable!
val nice = 69 // Can't reassign to this!

// You can group variable declarations together.
var
    age = 21,
    is_cool = true,
    unknown

// Also works with final variables.
val 
    is_nice = true,
    is_not_nice = false

puts(string.upcase("hello")) //=> "HELLO"
puts(math.ln(2)) //=> 0.693

// Note that the puts() native function appends a newline unlike the print
// statement.

// Conditionals!
// Note that there are no else-if statements. Use a switch statement instead.
if false {
    puts("How did this happen!")
} else {
    puts("This is supposed to happen")
}

val a = math.rand() * 10 |> math.floor()

switch a {
    0 => puts("a is 0")
    1 => puts("a is 1")
    2 => puts("a is 2")
    3 => puts("a is 3")
    4 => puts("a is 4")
    5 => puts("a is 5")
    else => puts("a is not between 0 and 5")
}

// Loops.
while true {
    puts("This will never end!")
    break // sike
}

// For loops.
for var i = 0; i < 10; i = i + 1 {
    puts(i)
} //=> 0 1 2 3 4 5 6 7 8 9

// Lists.
val l = [7, 69, 420]

list.push(l, 27)
puts(list.pop(l)) //=> 27

for var i = 0; i < len(l); i = i + 1 {
    puts(i)
}

// Break and continue.
for var i = 0; i < 6; i = i + 1 {
    if i == 5 {
        break
    }

    if i == 2 {
        continue
    }

    puts(i)
} //=> 0 1 3 4

// Functions!
func a_function() {
    puts("This is a function!")
}
a_function() //=> "This is a function!"

// If the function just returns an expression, simply use the `=>` operator.
func sum(a, b) => a + b

// Anonymous functions have no name. Here, we assign it to a variable, so it
// isn't really anonymous anymore.
val anon = func() { 
    puts("This is an anonymous function!") 
}
// Functions are first-class, so you can pass them around to other functions.

// Pipes!
// Pipes are used to pass expressions to other expressions.
// For example, the following two lines are equivalent:
puts(string.upcase("hello"))
puts("hello" |> string.upcase())

// In a pipeline, any function call implicitly takes the last expression as its
// first argument.
// Another way to access the last expression is with the `it` keyword.
puts("69"
    |> parse()
    |> it + 1) //=> 70

// Modules!
// You can use one of the builtin modules:
use "time"

time.clock() // Current time in UNIX ms

// You can also import your own files.
use "./helper.zn"

helper.woo() //=> from a module!

// Note that if you import your own files, to use functions in them they must
// be explicitly set as public using the `pub` keyword.
pub func foo() {
    puts("You can use this from any file!")    
}
